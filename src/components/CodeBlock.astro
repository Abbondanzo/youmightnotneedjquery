---
import {Prism} from '@astrojs/prism';

export interface Props {
  lang?: string;
  code?: string;
}

const {lang, code} = Astro.props as Props;
---

<div class="code-wrapper">
  <button title="Copy code snippet" class="copy-code">ðŸ“‹</button>
  {code && <Prism class="code" lang={lang} code={code} />}
</div>

<style is:global lang="scss">
  .code-wrapper {
    position: relative;

    button {
      --background-color: #eee;
      --border-color: #ccc;

      .dark-mode & {
        --background-color: #222426;
        --border-color: transparent;
      }

      position: absolute;
      top: 0;
      right: 0;
      opacity: 0.2;
      cursor: pointer;
      background: var(--background-color);
      border: 1px solid transparent;
      padding: 6px;

      &:hover {
        opacity: 1;
        border-color: var(--border-color);
      }
    }

    // Prism styling
    .token.operator,
    .token.entity,
    .token.url,
    .language-css .token.string,
    .style .token.string {
      background: transparent;
    }

    .dark-mode & {
      code[class*='language-'],
      pre[class*='language-'] {
        color: #ccc;
        text-shadow: none !important;
      }
      :not(pre) > code[class*='language-'],
      pre[class*='language-'] {
        background: #2d2d2d;
      }
      :not(pre) > code[class*='language-'] {
        padding: 0.1em;
        border-radius: 0.3em;
        white-space: normal;
      }
      .token.block-comment,
      .token.cdata,
      .token.comment,
      .token.doctype,
      .token.prolog {
        color: #999;
      }
      .token.punctuation {
        color: #ccc;
      }
      .token.attr-name,
      .token.deleted,
      .token.namespace,
      .token.tag {
        color: #e2777a;
      }
      .token.function-name {
        color: #6196cc;
      }
      .token.boolean,
      .token.function,
      .token.number {
        color: #f08d49;
      }
      .token.class-name,
      .token.constant,
      .token.property,
      .token.symbol {
        color: #f8c555;
      }
      .token.atrule,
      .token.builtin,
      .token.important,
      .token.keyword,
      .token.selector {
        color: #cc99cd;
      }
      .token.attr-value,
      .token.char,
      .token.regex,
      .token.string,
      .token.variable {
        color: #7ec699;
      }
      .token.entity,
      .token.operator,
      .token.url {
        color: #67cdcc;
      }
      .token.inserted {
        color: green;
      }
    }
  }
</style>

<script>
  function oldCopyText(text: string) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.top = '0';
    textArea.style.left = '0';
    textArea.style.position = 'fixed'; // Avoids scrolling on focus
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();

    try {
      document.execCommand('copy');
    } finally {
      document.body.removeChild(textArea);
    }
  }

  function copyText(text: string) {
    if (!navigator.clipboard) {
      oldCopyText(text);
      return;
    }
    navigator.clipboard.writeText(text).catch(() => {
      oldCopyText(text);
    });
  }

  const buttonElements = document.querySelectorAll('.copy-code');
  buttonElements.forEach((el) => {
    el.setAttribute('data-label', el.innerHTML);
    el.addEventListener('click', (event) => {
      const currentEl = event.target as HTMLElement;
      const pre = currentEl.nextElementSibling;
      if (pre) {
        copyText(pre.textContent);
        const range = document.createRange();
        range.selectNode(pre);
        getSelection().removeAllRanges();
        getSelection().addRange(range);
        currentEl.innerHTML = 'Copied!';
        setTimeout(() => {
          currentEl.innerHTML = currentEl.getAttribute('data-label');
        }, 1000);
      } else {
        currentEl.innerHTML = 'Failed to copy :(';
        setTimeout(() => {
          currentEl.innerHTML = currentEl.getAttribute('data-label');
        }, 1000);
      }
    });
  });
</script>
